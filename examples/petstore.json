{
    "openapi": "3.0.0",
    "info": {
      "title": "Petstore Sample API",
      "description": "A sample API that uses a petstore as an example to demonstrate features in the OpenAPI-2.0 specification",
      "contact": {
        "name": "Wordnik API Team"
      },
      "license": {
        "name": "MIT",
        "url": "http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT"
      }
    },
    "servers": [
      {
        "url": "https://petstore3.swagger.io/api/v3"
      }
    ],
    "paths": {
      "/pet": {
        "put": {
          "tags": ["pet"],
          "requestBody": {
            "description": "Pet object that needs to be added to the store",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "responses": {
            "400": { "description": "Invalid ID supplied" },
            "404": { "description": "Pet not found" },
            "405": { "description": "Validation exception" }
          }
        },
        "post": {
          "tags": ["pet"],
          "requestBody": {
            "description": "Pet object that needs to be added to the store",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "responses": {
            "405": { "description": "Invalid input" }
          }
        }
      },
      "/user/createWithList": {
        "post": {
          "tags": ["user"],
          "requestBody": {
            "description": "List of user object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/store/order/{orderId}": {
        "get": {
          "tags": ["store"],
          "parameters": [
            {
              "name": "orderId",
              "in": "path",
              "required": true,
              "schema": { "type": "string" },
              "description": "ID of pet that needs to be fetched"
            }
          ],
          "responses": {
            "400": { "description": "Invalid ID supplied" },
            "404": { "description": "Order not found" }
          }
        },
        "delete": {
          "tags": ["store"],
          "parameters": [
            {
              "name": "orderId",
              "in": "path",
              "required": true,
              "schema": { "type": "string" },
              "description": "ID of the order that needs to be deleted"
            }
          ],
          "responses": {
            "400": { "description": "Invalid ID supplied" },
            "404": { "description": "Order not found" }
          }
        }
      },
      "/user/createWithArray": {
        "post": {
          "tags": ["user"],
          "requestBody": {
            "description": "List of user object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "responses": {}
        }
      },
      "/store/order": {
        "post": {
          "tags": ["store"],
          "requestBody": {
            "description": "order placed for purchasing the pet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "responses": {
            "400": { "description": "Invalid Order" }
          }
        }
      },
      "/pet/findByStatus": {
        "get": {
          "tags": ["pet"],
          "parameters": [
            {
              "name": "status",
              "in": "query",
              "schema": { "type": "string" },
              "description": "Status values that need to be considered for filter"
            }
          ],
          "responses": {
            "400": { "description": "Invalid status value" }
          }
        }
      },
      "/user/{username}": {
        "get": {
          "tags": ["user"],
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "required": true,
              "schema": { "type": "string" },
              "description": "The name that needs to be fetched. Use user1 for testing."
            }
          ],
          "responses": {
            "400": { "description": "Invalid username supplied" },
            "404": { "description": "User not found" }
          }
        },
        "put": {
          "tags": ["user"],
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "required": true,
              "schema": { "type": "string" },
              "description": "name that need to be deleted"
            }
          ],
          "requestBody": {
            "description": "Updated user object",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "responses": {
            "400": { "description": "Invalid user supplied" },
            "404": { "description": "User not found" }
          }
        },
        "delete": {
          "tags": ["user"],
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "required": true,
              "schema": { "type": "string" },
              "description": "The name that needs to be deleted"
            }
          ],
          "responses": {
            "400": { "description": "Invalid username supplied" },
            "404": { "description": "User not found" }
          }
        }
      },
      "/pet/findByTags": {
        "get": {
          "tags": ["pet"],
          "parameters": [
            {
              "name": "tags",
              "in": "query",
              "schema": { "type": "string" },
              "description": "Tags to filter by"
            }
          ],
          "responses": {
            "400": { "description": "Invalid tag value" }
          }
        }
      },
      "/user": {
        "post": {
          "tags": ["user"],
          "requestBody": {
            "description": "Created user object",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "responses": {}
        }
      },
      "/pet/{petId}": {
        "get": {
          "tags": ["pet"],
          "parameters": [
            {
              "name": "petId",
              "in": "path",
              "required": true,
              "schema": { "type": "string" },
              "description": "ID of pet that needs to be fetched"
            }
          ],
          "responses": {
            "400": { "description": "Invalid ID supplied" },
            "404": { "description": "Pet not found" }
          }
        }
      },
      "/user/logout": {
        "get": {
          "tags": ["user"],
          "responses": {}
        }
      },
      "/user/login": {
        "get": {
          "tags": ["user"],
          "parameters": [
            {
              "name": "username",
              "in": "query",
              "schema": { "type": "string" },
              "description": "The user name for login"
            },
            {
              "name": "password",
              "in": "query",
              "schema": { "type": "string" },
              "description": "The password for login in clear text"
            }
          ],
          "responses": {
            "400": { "description": "Invalid username/password supplied" }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "User": {
          "type": "object",
          "properties": {
            "id": { "type": "integer", "format": "int32" },
            "firstName": { "type": "string" },
            "lastName": { "type": "string" },
            "username": { "type": "string" },
            "password": { "type": "string" },
            "email": { "type": "string" },
            "phone": { "type": "string" },
            "userStatus": { "type": "integer", "format": "int32" }
          }
        },
        "Category": {
          "type": "object",
          "properties": {
            "id": { "type": "integer", "format": "int32" },
            "name": { "type": "string" }
          }
        },
        "Pet": {
          "type": "object",
          "properties": {
            "id": { "type": "integer", "format": "int32" },
            "category": { "$ref": "#/components/schemas/Category" },
            "name": { "type": "string" },
            "photoUrls": {
              "type": "array",
              "items": { "type": "string" }
            },
            "tags": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/Tag" }
            },
            "status": { "type": "string" }
          }
        },
        "Tag": {
          "type": "object",
          "properties": {
            "id": { "type": "integer", "format": "int32" },
            "name": { "type": "string" }
          }
        },
        "Order": {
          "type": "object",
          "properties": {
            "id": { "type": "integer", "format": "int32" },
            "petId": { "type": "integer", "format": "int32" },
            "quantity": { "type": "integer", "format": "int32" },
            "shipDate": { "type": "string", "format": "date-time" },
            "status": { "type": "string" },
            "complete": { "type": "boolean" }
          }
        }
      }
    }
  }
  